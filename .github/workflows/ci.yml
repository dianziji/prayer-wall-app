name: CI/CD Pipeline

# 临时禁用自动触发，专注于功能开发
# 当测试覆盖完善后可重新启用
on:
  workflow_dispatch: # 只允许手动触发
  # push:
  #   branches: [ main, develop, feature/* ]
  # pull_request:
  #   branches: [ main, develop ]

env:
  NODE_VERSION: '18'

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        test-type: [unit, api, components, e2e]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Setup environment variables
        run: |
          echo "NEXT_PUBLIC_SUPABASE_URL=mock://localhost" >> $GITHUB_ENV
          echo "NEXT_PUBLIC_SUPABASE_ANON_KEY=mock_key" >> $GITHUB_ENV
          
      - name: Run unit tests
        if: matrix.test-type == 'unit'
        run: |
          npm test -- tests/unit --coverage --maxWorkers=2 --silent
          
      - name: Run API tests
        if: matrix.test-type == 'api'
        run: |
          npm test -- tests/unit/api --maxWorkers=2 --silent
          
      - name: Run component tests
        if: matrix.test-type == 'components'
        run: |
          npm test -- tests/components --maxWorkers=2 --silent
          
      - name: Install Playwright dependencies
        if: matrix.test-type == 'e2e'
        run: |
          npx playwright install --with-deps
          
      - name: Build application
        if: matrix.test-type == 'e2e'
        run: npm run build
        
      - name: Run E2E tests
        if: matrix.test-type == 'e2e'
        run: |
          npm run test:e2e
          
      - name: Upload coverage reports
        if: matrix.test-type == 'unit'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage/lcov.info
          fail_ci_if_error: false
          
      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.test-type }}
          path: |
            coverage/
            test-results/
            playwright-report/
          retention-days: 30

  lint-and-typecheck:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run linting
        run: npm run lint
        
      - name: Run type checking
        run: npx tsc --noEmit
        
      - name: Check formatting
        run: npx prettier --check .
        continue-on-error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true
        
      - name: Check for known vulnerabilities
        run: npx audit-ci --moderate
        continue-on-error: true

  build:
    runs-on: ubuntu-latest
    needs: [test, lint-and-typecheck]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: .next/
          retention-days: 7

  report:
    runs-on: ubuntu-latest
    needs: [test, lint-and-typecheck, security, build]
    if: always()
    
    steps:
      - name: Download test artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true
          
      - name: Generate test summary
        run: |
          echo "# Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Jobs Status" >> $GITHUB_STEP_SUMMARY
          echo "- Unit Tests: ${{ needs.test.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Lint & TypeCheck: ${{ needs.lint-and-typecheck.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Audit: ${{ needs.security.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Build: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY