name: 🧪 Test Suite

# 临时禁用自动触发，专注于功能开发
on:
  workflow_dispatch: # 只允许手动触发
  # push:
  #   branches: [ main, develop, feature/* ]
  # pull_request:
  #   branches: [ main, develop ]

jobs:
  unit-tests:
    name: 🔬 Unit Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18.x, 20.x]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run linting
        run: npm run lint
        
      - name: 🧪 Run unit tests
        run: npm run test:unit -- --ci --coverage --maxWorkers=2
        
      - name: 📊 Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: unit-tests
          name: unit-tests-${{ matrix.node-version }}

  integration-tests:
    name: 🔗 Integration Tests  
    runs-on: ubuntu-latest
    needs: unit-tests
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🗄️ Setup test database
        run: |
          # Setup test database schema if needed
          echo "Setting up test database..."
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: 🔗 Run integration tests
        run: npm run test:integration -- --ci --coverage
        env:
          NODE_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_db
          
      - name: 📊 Upload integration coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage/lcov.info
          flags: integration-tests
          name: integration-tests

  e2e-tests:
    name: 🎭 E2E Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🎭 Install Playwright browsers
        run: npx playwright install --with-deps
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: 🎭 Run E2E tests
        run: npm run test:e2e
        env:
          NODE_ENV: test
          
      - name: 📤 Upload E2E test results
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report
          path: playwright-report/
          retention-days: 30

  test-quality-gate:
    name: 🚨 Quality Gate
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, e2e-tests]
    if: always()
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 📊 Generate final coverage report
        run: npm run test:coverage
        
      - name: 🎯 Check coverage thresholds
        run: |
          echo "Checking coverage thresholds..."
          # Add custom coverage threshold checks here
          
      - name: ✅ Quality gate passed
        if: success()
        run: echo "🎉 All tests passed! Quality gate cleared."
        
      - name: ❌ Quality gate failed  
        if: failure()
        run: |
          echo "❌ Quality gate failed!"
          echo "Please check test results and coverage reports."
          exit 1

  security-tests:
    name: 🔒 Security Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🔍 Run security audit
        run: npm audit --audit-level=moderate
        
      - name: 🔒 Run dependency vulnerability check
        run: |
          # Add additional security checks here
          echo "Running security vulnerability checks..."

  performance-tests:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        
      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
          cache: 'npm'
          
      - name: 📥 Install dependencies
        run: npm ci
        
      - name: 🏗️ Build application
        run: npm run build
        
      - name: ⚡ Run performance tests
        run: |
          # Add Lighthouse CI or other performance testing tools
          echo "Running performance benchmarks..."